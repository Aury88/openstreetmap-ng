[tool.poetry]
authors = []
description = ""
name = "openstreetmap-ng"
packages = [
  {include = "app"},
]
version = "0.0.0"

[tool.poetry.dependencies]
aioboto3 = "^13.1.0"
aiohttp = {extras = ["speedups"], version = "^3.9.3"}
aiosmtplib = "^3.0.1"
alembic = "^1.13.1"
argon2-cffi = "^23.1.0"
arrow = "^1.3.0"
beautifulsoup4 = {extras = ["charset-normalizer", "lxml"], version = "^4.12.3"}
bleach = "^6.1.0"
brotli = "^1.1.0"
certifi = "*"
cython = "^3.0.7"
dnspython = "^2.6.1"
email-validator = "^2.1.0.post1"
fastapi = "<1"
feedgen = "^1.0.0"
jinja2 = "^3.1.2"
lxml = "^5.0.1"
markdown-it-py = {extras = ["plugins"], version = "^3.0.0"}
msgspec = "<1"
phonenumbers = "^8.13.27"
pillow = "^10.2.0"
protobuf = "~5.27.2"
pycryptodomex = "^3.20.0"
pydantic = "^2.5.3"
pyinstrument = "^4.6.1"
python = "^3.12"
python-dateutil = "^2.8.2"
python-magic = "<1"
python-multipart = "<1"
pytz = "*"
pyyaml = "^6.0.1"
redis = {extras = ["hiredis"], version = "^5.0.2"}
rfc3986 = "^2.0.0"
rtree = "^1.3.0"
scikit-learn = "^1.5.1"
setuptools = "*"
shapely = "^2.0.2"
sqlalchemy = {extras = ["postgresql-asyncpg"], version = "^2.0.28"}
starlette-compress = "^1.0.1"
supervisor = "^4.2.5"
tqdm = "^4.66.1"
uvicorn = {extras = ["standard"], version = "<1"}
uvloop = "<1"
zid = "^1.0.0"
zstandard = "<1"

[tool.poetry.group.dev.dependencies]
cairosvg = "^2.7.1"
click = "^8.1.7"
lxml-stubs = "<1"
polars = "<1"
pre-commit = "^3.7.1"
types-aioboto3 = {extras = ["s3"], version = "^13.1.0"}
types-protobuf = "^5.27.0.20240626"

[tool.poetry.group.test.dependencies]
httpx = "<1"
pytest = "^8.0.0"
pytest-asyncio = "<1"
pytest-cov = "^5.0.0"

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core"]

[tool.ruff]
# exclude a variety of commonly ignored directories.
exclude = [
  ".direnv",
  ".git",
  ".github",
  ".pytest_cache",
  ".ruff_cache",
  ".sass-cache",
  ".venv",
  ".vscode",
  "build",
  "dist",
  "node_modules",
  "app/alembic/versions",
  "app/models/*_pb2.py",
]

indent-width = 4
line-length = 120
target-version = "py312"

[tool.ruff.lint]
# custom + https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
ignore = [
  "ARG001", # unused-function-argument
  "ARG002", # unused-method-argument
  "B017", # assert-raises-exception
  "TRY003", # raise-vanilla-args
  "S101", # assert
  "SIM108", # if-else-block-instead-of-if-exp
  "PT011", # pytest-raises-too-broad
  "PLW0603", # global-statement
  "PLW2901", # redefined-loop-name
  "PLR09", # too-many-*
  "PLR1702", # too-many-nested-blocks
  "PLR2",
  "W191", # tab-indentation
  "E111", # indentation-with-invalid-multiple
  "E114", # indentation-with-invalid-multiple-comment
  "E117", # over-indented
  "E501", # line-too-long
  "D206", # indent-with-spaces
  "D300", # triple-single-quotes
  "Q000", # bad-quotes-inline-string
  "Q001", # bad-quotes-multiline-string
  "Q002", # bad-quotes-docstring
  "Q003", # avoidable-escaped-quote
  "COM812", # missing-trailing-comma
  "COM819", # prohibited-trailing-comma
  "ISC001", # single-line-implicit-string-concatenation
  "ISC002", # multi-line-implicit-string-concatenation
]
# see https://docs.astral.sh/ruff/rules/ for rules documentation
select = [
  "A", # flake8-builtins
  "ARG", # flake8-unused-arguments
  "ASYNC", # flake8-async
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "DTZ", # flake8-datetimez
  "E4", # pycodestyle
  "E7",
  "E9",
  "F", # pyflakes
  "FA", # flake8-future-annotations
  "FLY", # flynt
  "FURB", # refurb
  "G", # flake8-logging-format
  "I", # isort
  "ICN", # flake8-import-conventions
  "INT", # flake8-gettext
  "ISC", # flake8-implicit-str-concat
  "LOG", # flake8-logging
  "N", # pep8-naming
  "NPY", # numpy
  "Q", # flake8-quotes
  "PERF", # perflint
  "PIE", # flake8-pie
  "PLC", # pylint
  "PLE", # pylint
  "PLR", # pylint
  "PLW", # pylint
  "PT", # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  "PYI", # flake8-pyi
  "RSE", # flake8-raise
  "RUF", # ruff
  "S", # flake8-bandit
  "SIM", # flake8-simplify
  "SLF", # flake8-self
  "SLOT", # flake8-slots
  "T10", # flake8-debugger
  "TID", # flake8-tidy-imports
  "TRY", # tryceratops
  "UP", # pyupgrade
  "W6",
  "YTT", # flake8-2020
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
indent-style = "space"
line-ending = "lf"
quote-style = "single"
skip-magic-trailing-comma = false

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["id", "input", "open", "type", "format", "dir"]

[tool.ruff.lint.flake8-gettext]
extend-function-names = ["pgettext", "npgettext"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"
multiline-quotes = "double"

[tool.ruff.lint.pep8-naming]
extend-ignore-names = ["ET"]

[tool.ruff.lint.pylint]
max-args = 10

[tool.pyright]
disableBytesTypePromotions = true
exclude = ["app/alembic/versions", "app/models/*_pb2.py"]
include = ["app", "scripts", "tests"]
pythonPlatform = "All"
pythonVersion = "3.12"
reportCallInDefaultInitializer = "error"
reportDeprecated = "warning"
reportImplicitOverride = "warning"
reportInconsistentConstructor = "error"
reportInvalidStubStatement = "information"
reportMatchNotExhaustive = "error"
reportMissingModuleSource = "none"
reportPropertyTypeMismatch = "error"
reportShadowedImports = "warning"
reportUninitializedInstanceVariable = "error"
reportUnnecessaryCast = "information"
reportUnnecessaryComparison = "information"
reportUnnecessaryContains = "information"
reportUnnecessaryIsInstance = "information"
reportUnnecessaryTypeIgnoreComment = "information"
reportUntypedBaseClass = "warning"
reportUntypedClassDecorator = "warning"
reportUntypedFunctionDecorator = "information"
reportUntypedNamedTuple = "warning"
strictListInference = true
strictSetInference = true

[tool.pytest.ini_options]
addopts = "--quiet"
asyncio_default_fixture_loop_scope = "session"
asyncio_mode = "auto"
minversion = "6.0"
testpaths = ["tests"]
