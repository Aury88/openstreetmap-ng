[tool.poetry]
authors = ["Your Name <you@example.com>"]
description = ""
name = "openstreetmap-ng"
packages = [
  {include = "app"},
]
version = "0.0.0"

[tool.poetry.dependencies]
aioboto3 = "^12.1.0"
aiosmtplib = "^3.0.1"
alembic = "^1.13.1"
alembic-utils = "<1"
anyio = "^4.2.0"
argon2-cffi = "^23.1.0"
asyncpg = "<1"
authlib = "^1.3.0"
beautifulsoup4 = "^4.12.2"
bleach = "^6.1.0"
brotlicffi = "^1.1.0.0"
cython = "^3.0.7"
email-validator = "^2.1.0.post1"
fastapi = "<1"
feedgen = "^1.0.0"
geoalchemy2 = "<1"
httpx = {extras = ["brotli", "http2"], version = "<1"}
itsdangerous = "^2.1.2"
jinja2 = "^3.1.2"
lxml = "^5.0.1"
markdown-it-py = {extras = ["plugins"], version = "^3.0.0"}
msgspec = "<1"
networkx = "^3.2.1"
orjson = "3.9.10"
phonenumbers = "^8.13.27"
pillow = "^10.2.0"
psycopg2-binary = "^2.9.9"
pycryptodomex = "^3.20.0"
pydantic = "^2.5.3"
pyinstrument = "^4.6.1"
pyproj = "^3.6.1"
python = "^3.12"
python-dateutil = "^2.8.2"
python-magic = "<1"
python-multipart = "<1"
pytz = "*"
pyyaml = "^6.0.1"
redis = "^5.0.1"
rfc3986 = "^2.0.0"
setuptools = "^69.0.3"
shapely = "^2.0.2"
sqlalchemy = {extras = ["asyncio"], version = "^2.0.25"}
supervisor = "^4.2.5"
tqdm = "^4.66.1"
uvicorn = {extras = ["standard"], version = "<1"}
uvloop = "<1"

[tool.poetry.group.test.dependencies]
pytest = "^7.4.4"
pytest-cov = "^4.1.0"
pytest-watcher = "^0.3.4"
xmltodict = "^0.13.0"

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core", "setuptools", "wheel", "Cython"]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
  "app/alembic/versions",
]

indent-width = 4
line-length = 120
target-version = "py312"

[tool.ruff.lint]
# custom + https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
ignore = [
  "ARG001", # unused-function-argument
  "ARG002", # unused-method-argument
  "S101", # assert
  "PT011", # pytest-raises-too-broad
  "W191", # tab-indentation
  "E111", # indentation-with-invalid-multiple
  "E114", # indentation-with-invalid-multiple-comment
  "E117", # over-indented
  "E501", # line-too-long
  "D206", # indent-with-spaces
  "D300", # triple-single-quotes
  "Q000", # bad-quotes-inline-string
  "Q001", # bad-quotes-multiline-string
  "Q002", # bad-quotes-docstring
  "Q003", # avoidable-escaped-quote
  "COM812", # missing-trailing-comma
  "COM819", # prohibited-trailing-comma
  "ISC001", # single-line-implicit-string-concatenation
  "ISC002", # multi-line-implicit-string-concatenation
]
select = [
  # see https://docs.astral.sh/ruff/rules/ for rules documentation
  "A", # flake8-builtins
  "ARG", # flake8-unused-arguments
  "ASYNC", # flake8-async
  "B", # flake8-bugbear
  # "COM", # flake8-commas
  "C4", # flake8-comprehensions
  "E4", # pycodestyle
  "E7",
  "E9",
  "F", # pyflakes
  # "FBT", # flake8-boolean-trap
  "FLY", # flynt
  # "FURB", # refurb (preview)
  "G", # flake8-logging-format
  "I", # isort
  "INT", # flake8-gettext
  "ISC", # flake8-implicit-str-concat
  # "LOG", # flake8-logging (preview)
  "N", # pep8-naming
  "NPY", # numpy
  "Q", # flake8-quotes
  "PD", # pandas-vet
  "PERF", # perflint
  "PGH", # pygrep-hooks
  "PIE", # flake8-pie
  # "PL", # pylint
  "PT", # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  "PYI", # flake8-pyi
  "RSE", # flake8-raise
  "RUF", # ruff
  "S", # flake8-bandit
  "SIM", # flake8-simplify
  "SLF", # flake8-self
  "SLOT", # flake8-slots
  "T10", # flake8-debugger
  # "T20", # flake8-print
  "TID", # flake8-tidy-imports
  # "TRY", # tryceratops
  "UP", # pyupgrade
  "W6",
  "YTT", # flake8-2020
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "single"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "lf"

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["id", "input", "open", "type"]

[tool.ruff.lint.flake8-gettext]
extend-function-names = ["pgettext", "npgettext"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"
multiline-quotes = "double"

[tool.ruff.lint.pep8-naming]
extend-ignore-names = ["ET"]

[tool.ruff.lint.pylint]
max-args = 10

[tool.pytest.ini_options]
addopts = "-ra --quiet --disable-pytest-warnings"
minversion = "6.0"
testpaths = [
  "tests",
]
