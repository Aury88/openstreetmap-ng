//= depend_on settings.yml
//= depend_on settings.local.yml
//= require qs/dist/qs

OSM = {
<% if defined?(Settings.matomo) %>
  MATOMO:                  <%= Settings.matomo.to_json %>,
<% end %>

  MAX_REQUEST_AREA:        <%= Settings.max_request_area.to_json %>,
  SERVER_PROTOCOL:         <%= Settings.server_protocol.to_json %>,
  SERVER_URL:              <%= Settings.server_url.to_json %>,
  API_VERSION:             <%= Settings.api_version.to_json %>,
  STATUS:                  <%= Settings.status.to_json %>,
  MAX_NOTE_REQUEST_AREA:   <%= Settings.max_note_request_area.to_json %>,
  OVERPASS_URL:            <%= Settings.overpass_url.to_json %>,
  OVERPASS_CREDENTIALS:    <%= Settings.overpass_credentials.to_json %>,
  NOMINATIM_URL:           <%= Settings.nominatim_url.to_json %>,
  GRAPHHOPPER_URL:         <%= Settings.graphhopper_url.to_json %>,
  FOSSGIS_OSRM_URL:        <%= Settings.fossgis_osrm_url.to_json %>,
  FOSSGIS_VALHALLA_URL:    <%= Settings.fossgis_valhalla_url.to_json %>,
  DEFAULT_LOCALE:          <%= I18n.default_locale.to_json %>,

<% if Settings.key?(:thunderforest_key) %>
  THUNDERFOREST_KEY:       <%= Settings.thunderforest_key.to_json %>,
<% end %>

  MARKER_GREEN:            <%= image_path("marker-green.png").to_json %>,
  MARKER_RED:              <%= image_path("marker-red.png").to_json %>,

  MARKER_ICON:             <%= image_path("leaflet/dist/images/marker-icon.png").to_json %>,
  MARKER_ICON_2X:          <%= image_path("leaflet/dist/images/marker-icon-2x.png").to_json %>,
  MARKER_SHADOW:           <%= image_path("leaflet/dist/images/marker-shadow.png").to_json %>,

  NEW_NOTE_MARKER:         <%= image_path("new_note_marker.png").to_json %>,
  OPEN_NOTE_MARKER:        <%= image_path("open_note_marker.png").to_json %>,
  CLOSED_NOTE_MARKER:      <%= image_path("closed_note_marker.png").to_json %>,

  apiUrl: function (object) {
    var apiType = object.type === "note" ? "notes" : object.type;
    var url = "/api/" + OSM.API_VERSION + "/" + apiType + "/" + object.id;

    if (object.type === "way" || object.type === "relation") {
      url += "/full";
    } else if (object.version) {
      url += "/" + object.version;
    }

    return url;
  },

  params: function(search) {
    var params = {};

    search = (search || window.location.search).replace('?', '').split(/&|;/);

    for (var i = 0; i < search.length; ++i) {
      var pair = search[i],
        j = pair.indexOf('='),
        key = pair.slice(0, j),
        val = pair.slice(++j);

      try {
        params[key] = decodeURIComponent(val);
      } catch (e) {
        // Ignore parse exceptions
      }
    }

    return params;
  },

  locationCookie: function(map) {
    var center = map.getCenter().wrap(),
      zoom = map.getZoom(),
      precision = OSM.zoomPrecision(zoom);
    return [center.lng.toFixed(precision), center.lat.toFixed(precision), zoom, map.getLayersCode()].join('|');
  },

  distance: function(latlng1, latlng2) {
    var lat1 = latlng1.lat * Math.PI / 180,
      lng1 = latlng1.lng * Math.PI / 180,
      lat2 = latlng2.lat * Math.PI / 180,
      lng2 = latlng2.lng * Math.PI / 180,
      latdiff = lat2 - lat1,
      lngdiff = lng2 - lng1;

    return 6372795 * 2 * Math.asin(
      Math.sqrt(
        Math.pow(Math.sin(latdiff / 2), 2) +
        Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(lngdiff / 2), 2)
      ));
  }
};
